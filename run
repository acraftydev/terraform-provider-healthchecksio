#!/usr/bin/env bash

set -euo pipefail

export TERRAFORM_VERSION='0.12.2'

declare -r plugins_dir=".terraform/plugins"
declare -r dist_dir="${PWD:?}/dist"
declare -r examples_dir="${PWD:?}/examples"
declare -r test_dir="${PWD:?}/test"

function log() {
  local -r level="${1}"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  local -r script_name="$(basename "$0")"
  echo >&2 -e "${timestamp} [\033[1;94m${level}\033[0m] [$script_name] ${message}"
}

install_plugin() {
  local destination_dir="${1:?'A destination directory is required'}"
  log DEB "Installing plugin (src=${dist_dir:?} dest=${destination_dir:?})"
  [[ ! -d "${dist_dir:?}" ]] && log ERR "Source directory not found (${dist_dir:?})! Please run build and try again..." && exit 1
  rm -rf "${destination_dir:?}/${plugins_dir:?}" &>/dev/null || true
  mkdir -p "${destination_dir:?}/${plugins_dir:?}" &>/dev/null || true
  cp -R "${dist_dir:?}/." "${destination_dir:?}/${plugins_dir:?}"

  # Temporary fix. Issue: https://github.com/goreleaser/goreleaser/issues/1059
  local dir_name
  for dir in ${destination_dir:?}/${plugins_dir:?}/*/; do
    dir_name="$(basename "${dir:?}")"
    dir_name="${dir_name/dist_/}"
    mv "${dir}" "${destination_dir:?}/${plugins_dir:?}/${dir_name:?}"
  done
}

run_help() {
  echo "usage: ./run <command> [<arg1> <arg2> ...]

commands:
  build               Build the provider
  docker              Run a command in docker (example: ./run docker test)
  examples            Run examples
  test                Run tests
  test-integration    Run integration tests
  release             Create a new release of the provider"
}

export GPG_FINGERPRINT="${GPG_FINGERPRINT:-}"

ensure_gpg_fingerprint() {
  if [[ "${GPG_FINGERPRINT}" == '' && ${CI:-false} == false ]]; then
    log INF 'GPG_FINGERPRINT is not set in your environment. Please provide your gpg email adress to have it set for you!'
    echo -n ' GPG Email: '
    read -r GPG_FINGERPRINT
  fi
  [[ "${GPG_FINGERPRINT}" == '' ]] && log ERR 'Running this command requires the GPG_FINGERPRINT environment variable to be set. Exiting!' && exit 1
  return 0
}

run_build() {
  log INF 'Cross-compiling using goreleaser...'
  [[ "${1:-}" == '--sign' ]] && ensure_gpg_fingerprint

  if [[ "${GPG_FINGERPRINT}" == '' ]]; then
    goreleaser --snapshot --skip-publish --skip-sign --rm-dist
  else
    goreleaser --snapshot --skip-publish --skip-validate --rm-dist
  fi
}

run_release() {
  log INF 'Creating a release using goreleaser...'
  ensure_gpg_fingerprint
  goreleaser --rm-dist
}

run_examples() {
  [ "${HEALTHCHECKSIO_API_KEY:?'Environment variable "HEALTHCHECKSIO_API_KEY" is required'}" ]

  local example="${1:-}"

  log INF "Running example(s)..."

  for d in ${examples_dir:?}/**; do
    if [[ -d "${d}" ]]; then
      [[ "$(basename "${d:?}")" != "${example}" && "${example}" != "" ]] && continue

      log INF "Example: $(basename "${d:?}") (${d:?})"

      install_plugin "${d:?}"
      cd "${d:?}" || exit 1

      terraform init
      terraform apply
    fi
  done
}

run_test() {
  log INF 'Running unit tests...'
  go test healthchecksio/**
}

run_test_integration() {
  [ "${HEALTHCHECKSIO_API_KEY:?'Environment variable "HEALTHCHECKSIO_API_KEY" is required'}" ]

  log INF "Running integration tests ($(terraform version | head -n 1))..."

  for d in ${test_dir:?}/**; do
    if [[ -d "${d}" ]]; then
      log DEB "Test: $(basename "${d:?}") (${d:?})"

      rm -rf "${d:?}/terraform.tfstate" || true
      rm -rf "${d:?}/terraform.tfstate.backup" || true
      install_plugin "${d:?}"
      cd "${d:?}" || exit 1

      terraform init
      terraform apply -auto-approve
      terraform destroy -auto-approve
    fi
  done
}

run_docker() {
  local v="${1:?'A terraform version is required'}"
  shift

  log INF "Building test image for terraform v${v:?}"
  docker build -t "terraform-provider-healthchecksio:${v:?}-test" --build-arg "TERRAFORM_VERSION=${v:?}" -f "${PWD:?}/test/Dockerfile.test" .

  [[ "${1:-}" == 'docker' ]] && log ERR 'Unable to run docker in docker!' && exit 1

  log INF "Running in docker... (terraform v${v:?})"
  local tty='-it'
  [[ ${CI:-false} == true ]] && tty=''
  docker run --rm ${tty:-} -e HEALTHCHECKSIO_API_KEY -e GITHUB_TOKEN -e GPG_FINGERPRINT -v "${PWD:?}:/work/" "terraform-provider-healthchecksio:${v:?}-test" -c "./run $*"
}

main() {
  local command="${1:-}"
  shift || true

  git config core.hooksPath .githooks

  case "${command}" in
    build) run_build "$@" ;;
    docker) run_docker "${TERRAFORM_VERSION:?}" "$@" ;;
    examples) run_examples "$@" ;;
    test) run_test "$@" ;;
    test-integration) run_test_integration "$@" ;;
    release) run_release "$@" ;;
    help) run_help ;;
    *) run_help ;;
  esac
}

main "$@"
